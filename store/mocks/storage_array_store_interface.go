// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dell/csm-deployment/store (interfaces: StorageArrayStoreInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	model "github.com/dell/csm-deployment/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStorageArrayStoreInterface is a mock of StorageArrayStoreInterface interface
type MockStorageArrayStoreInterface struct {
	ctrl     *gomock.Controller
	recorder *MockStorageArrayStoreInterfaceMockRecorder
}

// MockStorageArrayStoreInterfaceMockRecorder is the mock recorder for MockStorageArrayStoreInterface
type MockStorageArrayStoreInterfaceMockRecorder struct {
	mock *MockStorageArrayStoreInterface
}

// NewMockStorageArrayStoreInterface creates a new mock instance
func NewMockStorageArrayStoreInterface(ctrl *gomock.Controller) *MockStorageArrayStoreInterface {
	mock := &MockStorageArrayStoreInterface{ctrl: ctrl}
	mock.recorder = &MockStorageArrayStoreInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorageArrayStoreInterface) EXPECT() *MockStorageArrayStoreInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockStorageArrayStoreInterface) Create(arg0 *model.StorageArray) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockStorageArrayStoreInterfaceMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockStorageArrayStoreInterface)(nil).Create), arg0)
}

// Delete mocks base method
func (m *MockStorageArrayStoreInterface) Delete(arg0 *model.StorageArray) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockStorageArrayStoreInterfaceMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStorageArrayStoreInterface)(nil).Delete), arg0)
}

// GetAll mocks base method
func (m *MockStorageArrayStoreInterface) GetAll() ([]model.StorageArray, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]model.StorageArray)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockStorageArrayStoreInterfaceMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockStorageArrayStoreInterface)(nil).GetAll))
}

// GetAllByID mocks base method
func (m *MockStorageArrayStoreInterface) GetAllByID(arg0 ...uint) ([]model.StorageArray, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAllByID", varargs...)
	ret0, _ := ret[0].([]model.StorageArray)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByID indicates an expected call of GetAllByID
func (mr *MockStorageArrayStoreInterfaceMockRecorder) GetAllByID(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByID", reflect.TypeOf((*MockStorageArrayStoreInterface)(nil).GetAllByID), arg0...)
}

// GetAllByStorageType mocks base method
func (m *MockStorageArrayStoreInterface) GetAllByStorageType(arg0 string) ([]model.StorageArray, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByStorageType", arg0)
	ret0, _ := ret[0].([]model.StorageArray)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByStorageType indicates an expected call of GetAllByStorageType
func (mr *MockStorageArrayStoreInterfaceMockRecorder) GetAllByStorageType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByStorageType", reflect.TypeOf((*MockStorageArrayStoreInterface)(nil).GetAllByStorageType), arg0)
}

// GetAllByUniqueID mocks base method
func (m *MockStorageArrayStoreInterface) GetAllByUniqueID(arg0 string) ([]model.StorageArray, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByUniqueID", arg0)
	ret0, _ := ret[0].([]model.StorageArray)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByUniqueID indicates an expected call of GetAllByUniqueID
func (mr *MockStorageArrayStoreInterfaceMockRecorder) GetAllByUniqueID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByUniqueID", reflect.TypeOf((*MockStorageArrayStoreInterface)(nil).GetAllByUniqueID), arg0)
}

// GetByID mocks base method
func (m *MockStorageArrayStoreInterface) GetByID(arg0 uint) (*model.StorageArray, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0)
	ret0, _ := ret[0].(*model.StorageArray)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockStorageArrayStoreInterfaceMockRecorder) GetByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockStorageArrayStoreInterface)(nil).GetByID), arg0)
}

// GetTypeByTypeName mocks base method
func (m *MockStorageArrayStoreInterface) GetTypeByTypeName(arg0 string) (*model.StorageArrayType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTypeByTypeName", arg0)
	ret0, _ := ret[0].(*model.StorageArrayType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTypeByTypeName indicates an expected call of GetTypeByTypeName
func (mr *MockStorageArrayStoreInterfaceMockRecorder) GetTypeByTypeName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTypeByTypeName", reflect.TypeOf((*MockStorageArrayStoreInterface)(nil).GetTypeByTypeName), arg0)
}

// Update mocks base method
func (m *MockStorageArrayStoreInterface) Update(arg0 *model.StorageArray) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockStorageArrayStoreInterfaceMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockStorageArrayStoreInterface)(nil).Update), arg0)
}
