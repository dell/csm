// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dell/csm-deployment/store (interfaces: UserStoreInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	model "github.com/dell/csm-deployment/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUserStoreInterface is a mock of UserStoreInterface interface
type MockUserStoreInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserStoreInterfaceMockRecorder
}

// MockUserStoreInterfaceMockRecorder is the mock recorder for MockUserStoreInterface
type MockUserStoreInterfaceMockRecorder struct {
	mock *MockUserStoreInterface
}

// NewMockUserStoreInterface creates a new mock instance
func NewMockUserStoreInterface(ctrl *gomock.Controller) *MockUserStoreInterface {
	mock := &MockUserStoreInterface{ctrl: ctrl}
	mock.recorder = &MockUserStoreInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserStoreInterface) EXPECT() *MockUserStoreInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockUserStoreInterface) Create(arg0 *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockUserStoreInterfaceMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserStoreInterface)(nil).Create), arg0)
}

// GetByID mocks base method
func (m *MockUserStoreInterface) GetByID(arg0 uint) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockUserStoreInterfaceMockRecorder) GetByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUserStoreInterface)(nil).GetByID), arg0)
}

// GetByUsername mocks base method
func (m *MockUserStoreInterface) GetByUsername(arg0 string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUsername", arg0)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUsername indicates an expected call of GetByUsername
func (mr *MockUserStoreInterfaceMockRecorder) GetByUsername(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUsername", reflect.TypeOf((*MockUserStoreInterface)(nil).GetByUsername), arg0)
}

// Update mocks base method
func (m *MockUserStoreInterface) Update(arg0 *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockUserStoreInterfaceMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserStoreInterface)(nil).Update), arg0)
}
